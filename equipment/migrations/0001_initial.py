# Generated by Django 5.1.5 on 2025-03-12 11:56

import cloudinary.models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('company_name', models.CharField(max_length=255, unique=True)),
                ('company_email', models.EmailField(max_length=255, unique=True)),
                ('contact', models.CharField(blank=True, max_length=20, null=True)),
                ('website', models.URLField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=255)),
                ('device_type', models.CharField(choices=[('diagnostic', 'Diagnostic Device'), ('therapeutic', 'Therapeutic Device'), ('life_support', 'Life-Support Device'), ('lab', 'Laboratory Analytic Device'), ('monitoring', 'Monitoring Device'), ('hospital_industrial', 'Hospital & Industrial Equipment'), ('safety_equipment', 'Safety Equipment'), ('other', 'Other Devices')], db_index=True, default='other', max_length=255)),
                ('equipment_id', models.CharField(max_length=20, unique=True)),
                ('department', models.CharField(choices=[('emergency', 'Emergency Department'), ('opd', 'Outpatient Department'), ('inpatient', 'Inpatient Department'), ('maternity', 'Maternity Ward'), ('laboratory', 'Laboratory Department'), ('pediatric', 'Pediatric  Department'), ('icu', 'Intensive Care Unit'), ('radiology', 'Radiology Department'), ('oncology', 'Oncology Department'), ('physiotherapy', 'Physiotherapy Department'), ('surgical', 'Surgical Department'), ('dental', 'Dental Clinic'), ('cardiology', 'Cardiology Department'), ('orthopedic', 'Orthopedic Department'), ('urology', 'Urology Department'), ('neurology', 'Neurology Department'), ('gynecology', 'Gynecology Department')], db_index=True, max_length=255)),
                ('operational_status', models.CharField(choices=[('functional', 'Functional'), ('non_functional', 'Non-Functional'), ('under_maintenance', 'Under Maintenance'), ('decommissioned', 'Decommissioned')], default='functional', max_length=20)),
                ('model', models.CharField(max_length=100)),
                ('manufacturer', models.CharField(max_length=100)),
                ('serial_number', models.CharField(max_length=100, unique=True)),
                ('manufacturing_date', models.DateField()),
                ('description', models.TextField(blank=True, null=True)),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('manual', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='manual')),
                ('decommission_date', models.DateField(blank=True, null=True)),
                ('added_by_name', models.CharField(editable=False, max_length=255, null=True)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='added_equipment', to=settings.AUTH_USER_MODEL)),
                ('supplier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipment', to='equipment.supplier')),
            ],
            options={
                'verbose_name': 'Equipment',
                'verbose_name_plural': 'Equipment',
            },
        ),
        migrations.CreateModel(
            name='EquipmentMaintenanceActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('activity_type', models.CharField(choices=[('preventive maintenance', 'Preventive Maintenance'), ('repair', 'Repair'), ('calibration', 'Calibration')], default='preventive maintenance', max_length=30)),
                ('date_time', models.DateTimeField()),
                ('pre_status', models.CharField(blank=True, choices=[('functional', 'Functional'), ('non_functional', 'Non-Functional'), ('under_maintenance', 'Under Maintenance'), ('decommissioned', 'Decommissioned')], max_length=30, null=True)),
                ('post_status', models.CharField(blank=True, choices=[('functional', 'Functional'), ('non_functional', 'Non-Functional'), ('under_maintenance', 'Under Maintenance'), ('decommissioned', 'Decommissioned')], max_length=30, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='equipment.equipment')),
                ('technician', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities_performed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_time'],
                'indexes': [models.Index(fields=['equipment', 'date_time'], name='equipment_e_equipme_27729b_idx')],
            },
        ),
        migrations.CreateModel(
            name='MaintenanceSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('activity_type', models.CharField(choices=[('preventive maintenance', 'Preventive Maintenance'), ('repair', 'Repair'), ('calibration', 'Calibration')], help_text='Type of maintenance activity.', max_length=30)),
                ('for_all_equipment', models.BooleanField(default=False, help_text='Check if the schedule is for all equipment.')),
                ('title', models.CharField(help_text='A short title for this maintenance schedule.', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Additional details about the maintenance schedule.', null=True)),
                ('start_date', models.DateTimeField(db_index=True, help_text='When the maintenance starts.')),
                ('end_date', models.DateTimeField(blank=True, db_index=True, help_text='When the maintenance ends.', null=True)),
                ('frequency', models.CharField(choices=[('once', 'Does not Repeat'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('biweekly', 'Biweekly'), ('monthly', 'Monthly')], default='once', help_text='How often this maintenance schedule repeats.', max_length=10)),
                ('interval', models.PositiveIntegerField(default=1, help_text='Interval between recurrences (e.g., every 2 weeks).')),
                ('recurring_end', models.DateTimeField(blank=True, help_text='Stop date/time for recurring schedules.', null=True)),
                ('last_notification', models.DateTimeField(blank=True, null=True)),
                ('next_occurrence', models.DateTimeField(blank=True, null=True)),
                ('equipment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_schedules', to='equipment.equipment')),
                ('technician', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='maintenance_scheduled', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['start_date'], name='equipment_m_start_d_9aa456_idx'), models.Index(fields=['last_notification'], name='equipment_m_last_no_93c271_idx'), models.Index(fields=['equipment'], name='equipment_m_equipme_124863_idx'), models.Index(fields=['next_occurrence'], name='equipment_m_next_oc_56b046_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='equipment',
            index=models.Index(fields=['name', 'department', 'operational_status'], name='equipment_e_name_8fece5_idx'),
        ),
        migrations.AddIndex(
            model_name='equipment',
            index=models.Index(fields=['equipment_id'], name='equipment_e_equipme_0c3500_idx'),
        ),
    ]
